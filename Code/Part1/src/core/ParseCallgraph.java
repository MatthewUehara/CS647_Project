package core;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Parse the callgraph generated by LLVM.
 */
public class ParseCallgraph {

	/**
	 * I don't think we need to overcomplicate things. Java can just perform
	 * Runtime.getRuntime().exec()
	 * 
	 * TODO This is just a rough start.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		String currentLine = null;

		try {
			Process process = Runtime.getRuntime().exec(
					"opt -print-callgraph ../proj-skeleton/test1/hello.bc");

			// Content of BitCode is printed to stdout. Not interesting.
			BufferedReader stdInput = new BufferedReader(new InputStreamReader(
					process.getInputStream()));

			// Call graph is printed to stderr.
			BufferedReader stdError = new BufferedReader(new InputStreamReader(
					process.getErrorStream()));

			// REGEX pattern for function name
			Pattern funcNamePattern = Pattern
					.compile("Call graph node for function: '(.*?)'<<(.*?)>>  #uses=(\\d*).*");

			// Parse stderr line by line
			while ((currentLine = stdError.readLine()) != null) {
				Matcher funcNameMatcher = funcNamePattern.matcher(currentLine);
				if (funcNameMatcher.find()) {
					// Function name
					System.out.println(funcNameMatcher.group(1));
					// uid?
					System.out.println(funcNameMatcher.group(2));
					// Number of uses
					System.out.println(funcNameMatcher.group(3));
				}

				System.out.println(currentLine);
			}

			System.exit(0);
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(-1);
		}
	}

}
