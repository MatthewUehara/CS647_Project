package core;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.text.NumberFormat;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Map;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Parse the callgraph generated by LLVM.
 */
public class ParseCallgraph {
	// REGEX pattern for function name
	public static final Pattern nodePattern = Pattern
			.compile("Call graph node for function: '(.*?)'<<(.*?)>>  #uses=(\\d*).*");
	// REGEX pattern for callsite
	public static final Pattern callsitePattern = Pattern
			.compile("\\s*CS<(.*?)> calls function '(.*?)'.*");

	/**
	 * I don't think we need to overcomplicate things. Java can just perform
	 * Runtime.getRuntime().exec()
	 * 
	 * TODO This is just a rough start.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		
		int T_SUPPORT = 3;
		double T_CONFIDENCE = 0.65;
		
		String currentLine = null;
		String currentNode = null;
		
		// update
		HashMap<String, TreeSet<String>> functionMap = new HashMap<String, TreeSet<String>>(); 
		HashMap<String, TreeSet<String>> functionMapIntra = new HashMap<String, TreeSet<String>>(); 

		try {
			// multi-threads resolve process deadlock problem
			final Process process = Runtime.getRuntime().exec(
					"opt -print-callgraph ../proj-skeleton/test3/test3.bc");
			new Thread() {
				public void run() {
				    InputStream isStdout  = process.getInputStream();
				    BufferedReader reader = new BufferedReader(new InputStreamReader(isStdout));
				    try {
						while (reader.readLine() != null);
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}.start();
			InputStream isError = process.getErrorStream();
			BufferedReader reader2 = new BufferedReader(new InputStreamReader(isError));
			
			// update
			String key = "";
			boolean check = false;
			
			while ((currentLine = reader2.readLine()) != null) {
				
				// We're at a new node
				Matcher nodeMatcher = nodePattern.matcher(currentLine);
				if (nodeMatcher.find()) {
					currentNode = nodeMatcher.group(1);
					
					// update
					key = currentNode;
					check = true;
					functionMap.put(key, new TreeSet<String>());
				}

				// We're at a callsite within currentNode
				Matcher callsiteMatcher = callsitePattern.matcher(currentLine);
				// First node in callgraph is a null function
				// TODO Do we need to evaluate it? TA's tutorial was unclear.
				
				// update
				if (check == false && callsiteMatcher.find()) {
					String callee = callsiteMatcher.group(2);
					functionMapIntra.put(callee, new TreeSet<String>());
				}
				
				if (callsiteMatcher.find() && currentNode != null) {
					
					// update
					String callee = callsiteMatcher.group(2);
					functionMap.get(key).add(callee);
					if (functionMapIntra.get(callee) == null) {
						functionMapIntra.put(callee, new TreeSet<String>());
					}
					functionMapIntra.get(callee).add(key);
				}

				System.out.println(currentLine);
			}
			
			TreeSet<String> t1 = new TreeSet<String>();
			TreeSet<String> t2 = new TreeSet<String>();
			t1.addAll(functionMapIntra.get("ap_escape_html"));
			t2.addAll(functionMapIntra.get("apr_pstrcat"));
			
			System.out.println(t1);
			System.out.println(t2);
			System.out.println(t1.size());
			t1.retainAll(t2);
			System.out.println(t1.size());
			
			// update
			TreeMap<PairConfidence, TreeSet<String>> pairs = new TreeMap<PairConfidence, TreeSet<String>>();
		    ArrayList<String> functions = new ArrayList<String>(); 
		    functions.addAll(functionMapIntra.keySet());
			for (int i = 0; i < functions.size(); i ++) {
				String function1 = functions.get(i);
				TreeSet<String> callerList = functionMapIntra.get(functions.get(i));
				int support = functionMapIntra.get(functions.get(i)).size();
				if (support == 0) {
					continue;
				}
				for (int j = 0; j < functions.size(); j ++) {
					if (i == j) {
						continue;
					}
					String function2 = functions.get(j);
					TreeSet<String> tmp = new TreeSet<String>();
					tmp.addAll(callerList);
					TreeSet<String> remain = new TreeSet<String>();
					remain.addAll(tmp);
					tmp.retainAll(functionMapIntra.get(functions.get(j)));
					remain.removeAll(tmp);
					int supportPair = tmp.size();
					if (supportPair < T_SUPPORT) {
						continue;
					}
					double confidence = ((double)supportPair) / ((double)support);
					
					if (confidence < T_CONFIDENCE) {
						continue;
					}
					
					String pair = "";
					if (function1.compareTo(function2) < 0) {
						pair = "(" + function1+ ", " + function2 +"), ";
					}
					else {
						pair = "(" + function2+ ", " + function1 +"), ";
					}
					PairConfidence pc = new PairConfidence(function1, pair, supportPair, confidence);
					pairs.put(pc, remain);
				}
			}
			
			System.out.println("RESULTS:");
			System.out.println("--------");
			NumberFormat numf = NumberFormat.getNumberInstance();
			numf.setMaximumFractionDigits(2);
			numf.setRoundingMode (RoundingMode.HALF_EVEN);
			TreeSet<String> display = new TreeSet<String>();
			for (Map.Entry entry : pairs.entrySet()) {
				String function = ((PairConfidence)entry.getKey()).getFunction();
				String header = "bug: " + function + " in ";
				for (String s: pairs.get(entry.getKey())) {
					display.add(header + s + ((PairConfidence)entry.getKey()).toString());
				}
			}
			for (String s : display) {
				System.out.println(s);
			}
			System.exit(0);
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(-1);
		}
	}
}
